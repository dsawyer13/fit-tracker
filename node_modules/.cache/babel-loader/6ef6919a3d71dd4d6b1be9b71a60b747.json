{"ast":null,"code":"import _classCallCheck from \"/home/dylan/Desktop/projects/fit-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dylan/Desktop/projects/fit-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dylan/Desktop/projects/fit-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dylan/Desktop/projects/fit-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dylan/Desktop/projects/fit-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dylan/Desktop/projects/fit-tracker/src/components/TableForm.js\";\nimport React from \"react\";\nimport Exercise from \"./Exercise\";\nimport { Form, Col, Row, Button, InputGroup, Table } from 'react-bootstrap';\nimport Select from 'react-select';\nimport { groupedOptions } from '../data.js';\n\nvar TableForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TableForm, _React$Component);\n\n  function TableForm(props) {\n    _classCallCheck(this, TableForm);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableForm).call(this, props));\n  }\n\n  _createClass(TableForm, [{\n    key: \"render\",\n    value: function render() {\n      var formatGroupLabel = function formatGroupLabel(data) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, data.label));\n      };\n\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(Select, {\n        options: groupedOptions,\n        formatGroupLabel: formatGroupLabel,\n        placeholder: \"Exercise...\",\n        name: \"name\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      })))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(Form.Control, {\n        type: \"number\",\n        name: \"weight\",\n        placeholder: \"Weight\",\n        value: this.state.weight || \"\",\n        required: true,\n        oninput: \"javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);\",\n        maxlength: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(InputGroup.Append, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(InputGroup.Text, {\n        id: \"inputGroupPrepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"lbs\")))))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Form.Control, {\n        type: \"number\",\n        name: \"sets\",\n        placeholder: \"Sets\",\n        value: this.state.sets || \"\",\n        required: true,\n        oninput: \"javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);\",\n        maxlength: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Form.Control, {\n        type: \"number\",\n        name: \"reps\",\n        placeholder: \"Reps\",\n        value: this.state.reps || \"\",\n        required: true,\n        oninput: \"javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);\",\n        maxlength: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"success\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Update\"), React.createElement(Button, {\n        variant: \"warning\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Cancel\"))))));\n    }\n  }]);\n\n  return TableForm;\n}(React.Component);\n\nexport { TableForm as default };","map":{"version":3,"sources":["/home/dylan/Desktop/projects/fit-tracker/src/components/TableForm.js"],"names":["React","Exercise","Form","Col","Row","Button","InputGroup","Table","Select","groupedOptions","TableForm","props","formatGroupLabel","data","label","state","weight","sets","reps","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Exercise from \"./Exercise\";\nimport { Form, Col, Row, Button, InputGroup, Table } from 'react-bootstrap';\nimport Select from 'react-select';\nimport { groupedOptions } from '../data.js';\n\nexport default class TableForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const formatGroupLabel = data => (\n      <div>\n        <span>{data.label}</span>\n      </div>\n    );\n\n    return (\n\n      <tr>\n        <Form>\n          <Row>\n            <td>\n              <Col>\n                <Form.Group>\n                  <Select\n                    options={groupedOptions}\n                    formatGroupLabel={formatGroupLabel}\n                    placeholder=\"Exercise...\"\n                    name=\"name\"\n                    required\n                   />\n                </Form.Group>\n              </Col>\n            </td>\n            <td>\n              <Col>\n                <Form.Group>\n                  <InputGroup>\n                    <Form.Control type=\"number\" name=\"weight\" placeholder=\"Weight\" value={this.state.weight || \"\"} required\n                      oninput=\"javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);\"\n                      maxlength=\"5\"/>\n                    <InputGroup.Append>\n                      <InputGroup.Text id=\"inputGroupPrepend\">lbs</InputGroup.Text>\n                    </InputGroup.Append>\n                  </InputGroup>\n                </Form.Group>\n              </Col>\n            </td>\n            <td>\n              <Col>\n                <Form.Group>\n                  <Form.Control type=\"number\" name=\"sets\" placeholder=\"Sets\" value={this.state.sets || \"\"} required\n                    oninput=\"javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);\"\n                    maxlength=\"5\" />\n                </Form.Group>\n              </Col>\n            </td>\n            <td>\n              <Col>\n                <Form.Group>\n                  <Form.Control type=\"number\" name=\"reps\" placeholder=\"Reps\" value={this.state.reps || \"\"} required\n                    oninput=\"javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);\"\n                    maxlength=\"5\"/>\n                </Form.Group>\n              </Col>\n            </td>\n            <td>\n              <Col>\n                <Button variant=\"success\" type=\"submit\">\n                  Update\n                </Button>\n                <Button variant=\"warning\" type=\"submit\">\n                  Cancel\n                </Button>\n              </Col>\n            </td>\n          </Row>\n        </Form>\n      </tr>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}